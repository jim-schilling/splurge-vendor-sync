---
description: design principles and guidelines
alwaysApply: false
---

- Follow SOLID (Single Responsibility, Open-Closed, Liskov Substitution, Interface Segregation, Dependency Inversion) principles.
- Follow DRY (Don't Repeat Yourself) principle.
- Follow BDD/TDD (Behavior/Test Driven Development) practices.
- Follow MVP (Minimum Viable Product) approach.
- Follow KISS (Keep It Simple, Stupid) principle.
- Follow PoLA (Principle of Least Authority).
- Follow YAGNI (You Aren't Gonna Need It) principle.
- Prefer composition over inheritance.
- Prefer encapsulation.
- Prefer separation of concerns.
- Prefer to fail fast.
- Follow the Law of Demeter - objects should only interact with their immediate dependencies.
- Prioritize error handling using appropriate mechanisms (exceptions, return values, Result types, or callbacks).
- Use guard clauses to handle preconditions and invalid state early.
- Avoid side effects in module-level code.
- Place the happy path (main successful execution flow) last in the function.
- Use guard clauses and early returns instead of complex if-else chains.
- Prefer iteration and modularization over code duplication.
- Prefer simple, straightforward design over over-engineering.
- Private methods should accept necessary data as parameters rather than directly accessing instance variables.
- Use domain-specific custom exceptions for public APIs.
- Use native/built-in exceptions for low-level APIs, where appropriate.
- Prioritize code clarity while maintaining reasonable efficiency.